{"version":3,"sources":["components/Cards/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","styles","card","display","backgroundSize","backgroundPosition","height","width","margin","border","borderRadius","boxShadow","cursor","container","minHeight","justifyContent","paddingTop","paddingBottom","className","style","cardImage","length","map","image","index","backgroundImage","onClick","clickHandler","Header","score","highScore","App","useState","setScore","setHighScore","images","setImages","useEffect","getImages","imagesArray","i","push","uuid","v4","e","preventDefault","Math","floor","random","newScore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k0BAuCeA,MArCf,SAAcC,GACZ,IAAIC,EAAS,CACXC,KAAM,CACJC,QAAS,cACTC,eAAgB,QAChBC,mBAAoB,MACpBC,OAAQ,QACRC,MAAO,QACPC,OAAQ,WACRC,OAAQ,oBACRC,aAAc,MACdC,UAAW,uDACXC,OAAQ,WAEVC,UAAW,CACTC,UAAW,MACXC,eAAgB,SAChBC,WAAY,OACZC,cAAe,OACfV,MAAO,MACPC,OAAQ,WAIZ,OACE,yBAAKU,UAAU,iBAAiBC,MAAOlB,EAAOY,WAC3Cb,EAAMoB,UAAUC,OAAS,EACtBrB,EAAMoB,UAAUE,KAAI,SAACC,EAAOC,GAAR,OAClB,yBACEL,MAAK,KAAOlB,EAAOC,KAAd,CAAoBuB,gBAAgB,OAAD,OAASF,EAAT,OACxCG,QAAS1B,EAAM2B,kBAGnB,O,MCxBKC,MARf,SAAgB5B,GACd,OACE,yBAAKkB,UAAU,oBAAf,WACWlB,EAAM6B,MADjB,mBACwC7B,EAAM8B,YC2CnCC,MA3Cf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNH,EADM,KACCI,EADD,OAEqBD,mBAAS,GAF9B,mBAENF,EAFM,KAEKI,EAFL,OAGeF,mBAAS,IAHxB,mBAGNG,EAHM,KAGEC,EAHF,KAKbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAY,WAEhB,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,GAAK,GAAIA,IACvBD,EAAYE,KAAZ,qCAA+CC,IAAKC,KAApD,aAEFP,EAAUG,IAqBZ,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,CAAQW,MAAOA,EAAOC,UAAWA,IACjC,kBAAC,EAAD,CAAMV,UAAWe,EAAQR,aArBR,SAAAiB,GAInB,GAHAA,EAAEC,iBAEcC,KAAKC,MAAsB,EAAhBD,KAAKE,UACjB,CACb,IAAIC,EAAWpB,EAAQ,EACvBI,EAASgB,GAELA,EAAWnB,GACbI,EAAae,GAGfX,SAEAL,EAAS,GACTK,SC1BcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.79fdc463.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card(props) {\n  var styles = {\n    card: {\n      display: \"inline-flex\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"50%\",\n      height: \"170px\",\n      width: \"170px\",\n      margin: \"8px 25px\",\n      border: \"5px solid #f1f1f1\",\n      borderRadius: \"3px\",\n      boxShadow: \"0 3px 6px rgba(0,0,0,.16), 0 3px 6px rgba(0,0,0,.23)\",\n      cursor: \"pointer\"\n    },\n    container: {\n      minHeight: \"80%\",\n      justifyContent: \"center\",\n      paddingTop: \"50px\",\n      paddingBottom: \"50px\",\n      width: \"90%\",\n      margin: \"0 auto\"\n    }\n  };\n\n  return (\n    <div className=\"card-container\" style={styles.container}>\n      {props.cardImage.length > 0\n        ? props.cardImage.map((image, index) => (\n            <div\n              style={{ ...styles.card, backgroundImage: `url(${image})` }}\n              onClick={props.clickHandler}\n            ></div>\n          ))\n        : null}\n    </div>\n  );\n}\nexport default Card;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"header-container\">\n      Score : {props.score} | High Score : {props.highScore}\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport uuid from \"uuid\";\nimport Card from \"./components/Cards\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [images, setImages] = useState([]);\n\n  useEffect(() => {\n    getImages();\n  }, []);\n\n  const getImages = () => {\n    var imagesArray = [];\n    for (var i = 0; i <= 10; i++) {\n      imagesArray.push(`https://picsum.photos/seed/${uuid.v4()}/500/500`);\n    }\n    setImages(imagesArray);\n  };\n\n  const clickHandler = e => {\n    e.preventDefault();\n\n    var randScore = Math.floor(Math.random() * 2);\n    if (randScore) {\n      var newScore = score + 1;\n      setScore(newScore);\n\n      if (newScore > highScore) {\n        setHighScore(newScore);\n      }\n\n      getImages();\n    } else {\n      setScore(0);\n      getImages();\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Header score={score} highScore={highScore} />\n      <Card cardImage={images} clickHandler={clickHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}